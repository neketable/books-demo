{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","books-demo/tests/app.lint-test.js","books-demo/tests/helpers/ember-i18n/test-helpers.js","books-demo/tests/helpers/ember-power-select.js","books-demo/tests/helpers/ember-simple-auth.js","books-demo/tests/integration/components/book-form-test.js","books-demo/tests/integration/components/book-item-test.js","books-demo/tests/integration/components/input-files-test.js","books-demo/tests/integration/components/input-tags-test.js","books-demo/tests/integration/components/login-form-test.js","books-demo/tests/integration/components/meeting-form-test.js","books-demo/tests/integration/components/meeting-item-test.js","books-demo/tests/integration/components/register-form-test.js","books-demo/tests/integration/components/review-form-test.js","books-demo/tests/integration/components/review-item-test.js","books-demo/tests/integration/components/speaker-form-test.js","books-demo/tests/integration/components/speaker-item-test.js","books-demo/tests/integration/helpers/env-test.js","books-demo/tests/integration/helpers/get-speaker-name-test.js","books-demo/tests/test-helper.js","books-demo/tests/tests.lint-test.js","books-demo/tests/unit/abilities/book-test.js","books-demo/tests/unit/abilities/meeting-test.js","books-demo/tests/unit/abilities/speaker-test.js","books-demo/tests/unit/adapters/application-test.js","books-demo/tests/unit/adapters/user-test.js","books-demo/tests/unit/controllers/application-test.js","books-demo/tests/unit/controllers/book-form-test.js","books-demo/tests/unit/controllers/books-test.js","books-demo/tests/unit/controllers/create-book-test.js","books-demo/tests/unit/controllers/create-meeting-test.js","books-demo/tests/unit/controllers/create-review-test.js","books-demo/tests/unit/controllers/create-test.js","books-demo/tests/unit/controllers/edit-book-test.js","books-demo/tests/unit/controllers/edit-meeting-test.js","books-demo/tests/unit/controllers/edit-review-test.js","books-demo/tests/unit/controllers/edit-speaker-test.js","books-demo/tests/unit/controllers/login-test.js","books-demo/tests/unit/controllers/meeting-test.js","books-demo/tests/unit/controllers/register-test.js","books-demo/tests/unit/controllers/speakers-test.js","books-demo/tests/unit/initializers/start-app-test.js","books-demo/tests/unit/models/book-test.js","books-demo/tests/unit/models/error-test.js","books-demo/tests/unit/models/meeting-test.js","books-demo/tests/unit/models/review-test.js","books-demo/tests/unit/models/speaker-test.js","books-demo/tests/unit/models/user-test.js","books-demo/tests/unit/routes/404-test.js","books-demo/tests/unit/routes/books-test.js","books-demo/tests/unit/routes/create-book-test.js","books-demo/tests/unit/routes/create-meeting-test.js","books-demo/tests/unit/routes/create-review-test.js","books-demo/tests/unit/routes/edit-book-test.js","books-demo/tests/unit/routes/edit-meeting-test.js","books-demo/tests/unit/routes/edit-review-test.js","books-demo/tests/unit/routes/edit-speaker-test.js","books-demo/tests/unit/routes/index-test.js","books-demo/tests/unit/routes/login-test.js","books-demo/tests/unit/routes/meeting-test.js","books-demo/tests/unit/routes/register-test.js","books-demo/tests/unit/routes/review-test.js","books-demo/tests/unit/routes/speakers-test.js","books-demo/tests/unit/routes/speakers/detail-test.js","books-demo/tests/unit/serializers/application-test.js","books-demo/tests/unit/serializers/book-test.js","books-demo/tests/unit/serializers/meeting-test.js","books-demo/tests/unit/serializers/review-test.js","books-demo/tests/unit/serializers/speaker-test.js","books-demo/tests/unit/services/current-user-test.js","books-demo/tests/unit/services/data-test.js","books-demo/tests/unit/services/error-service-test.js","books-demo/tests/unit/transforms/date-string-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('books-demo/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('abilities/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/book-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/book-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/book-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/book-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/input-files.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/input-files.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/input-tags.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/input-tags.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/login-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/login-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/meeting-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/meeting-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/meeting-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/meeting-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/register-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/register-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/review-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/review-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/review-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/review-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/speaker-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/speaker-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/speaker-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/speaker-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/books.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/books.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create-meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create-meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create-review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create-review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create-speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create-speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/edit-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/edit-meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit-meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/edit-review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit-review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/edit-speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit-speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n24:18 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/meeting.js should pass ESLint\\n\\n4:10 - \\'debounce\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass ESLint\\n\\n24:18 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/speakers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/speakers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/env.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/env.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-speaker-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-speaker-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/en/config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/config.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/en/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ru/config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/config.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ru/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('loggers/console-logger.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'loggers/console-logger.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/404.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/404.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/books.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/books.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create-meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create-meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create-review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create-review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create-speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create-speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/edit-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/edit-meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit-meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/edit-review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit-review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/edit-speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit-speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n12:42 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/register.js should pass ESLint\\n\\n13:42 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/speakers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speakers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/meeting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/meeting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/review.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/review.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/error-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/error-service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/date-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/date-string.js should pass ESLint\\n\\n');\n  });\n});","define('books-demo/tests/helpers/ember-i18n/test-helpers', ['ember-i18n/test-support/-private/t', 'ember-i18n/test-support/-private/assert-translation'], function (_t2, _assertTranslation2) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  Ember.Test.registerHelper('t', function (app, key, interpolations) {\n    return (0, _t2.default)(app.__container__, key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = (0, _t2.default)(app.__container__, key, interpolations);\n\n    (0, _assertTranslation2.default)(element, key, text);\n  });\n});","define('books-demo/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('books-demo/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('books-demo/tests/integration/components/book-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | book-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"uGOy+6PC\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"book-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"044e3rT8\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"book-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/book-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | book-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2x52WfKr\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"book-item\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"XOz6EBsH\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"book-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/input-files-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | input-files', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"toslMjDV\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"input-files\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"LhLWk/KE\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"input-files\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/input-tags-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | input-tags', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"jx2CQ+gn\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"input-tags\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"GnNXYKZM\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"input-tags\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/login-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | login-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"WCm5jH4F\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"login-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"QnYGFQE0\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"login-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/meeting-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | meeting-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"1Tge71cH\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"meeting-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+SgN9C3i\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"meeting-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/meeting-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | meeting-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"BYXbOdV8\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"meeting-item\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"InWqEAmc\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"meeting-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/register-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | register-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"YtZ5OcI6\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"register-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"0lFi1VJt\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"register-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/review-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | review-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"r5GeGoU8\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"review-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"H5DKxxau\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"review-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/review-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | review-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"neWorZwH\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"review-item\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"+zzp0GcV\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"review-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/speaker-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | speaker-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qcp+twW8\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"speaker-form\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"TWXDckYV\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"speaker-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/components/speaker-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Component | speaker-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"hf2D2UaF\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"speaker-item\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n\n                assert.equal(this.element.textContent.trim(), '');\n\n                // Template block usage:\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"X4ATFbQC\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"speaker-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n\n                assert.equal(this.element.textContent.trim(), 'template block text');\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/helpers/env-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Helper | env', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('inputValue', '1234');\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"gK7RAtd+\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"env\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                assert.equal(this.element.textContent.trim(), '1234');\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/integration/helpers/get-speaker-name-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Integration | Helper | get-speaker-name', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('inputValue', '1234');\n\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"grXFYaBl\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"get-speaker-name\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n\n                assert.equal(this.element.textContent.trim(), '1234');\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/test-helper', ['books-demo/app', 'books-demo/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('books-demo/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/book-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/book-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/book-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/book-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/input-files-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/input-files-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/input-tags-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/input-tags-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/login-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/login-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/meeting-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/meeting-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/meeting-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/meeting-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/register-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/register-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/review-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/review-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/review-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/review-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/speaker-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/speaker-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/speaker-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/speaker-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/env-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/env-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/get-speaker-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-speaker-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/abilities/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/abilities/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/abilities/meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/abilities/meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/abilities/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/abilities/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/books-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/books-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/speakers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/speakers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/start-app-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/start-app-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/404-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/404-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/books-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/books-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/create-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/create-meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/create-review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speakers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speakers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speakers/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speakers/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/meeting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/meeting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/review-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/review-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/current-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/current-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/error-service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/error-service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/transforms/date-string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/date-string-test.js should pass ESLint\\n\\n');\n  });\n});","define('books-demo/tests/unit/abilities/book-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('ability:book', 'Unit | Ability | book', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var ability = this.subject();\n    assert.ok(ability);\n  });\n});","define('books-demo/tests/unit/abilities/meeting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('ability:meeting', 'Unit | Ability | meeting', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var ability = this.subject();\n    assert.ok(ability);\n  });\n});","define('books-demo/tests/unit/abilities/speaker-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('ability:speaker', 'Unit | Ability | speaker', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var ability = this.subject();\n    assert.ok(ability);\n  });\n});","define('books-demo/tests/unit/adapters/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define('books-demo/tests/unit/adapters/user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var adapter = this.owner.lookup('adapter:user');\n      assert.ok(adapter);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/book-form-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book-form', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:book-form');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/books-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | books', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:books');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/create-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | create-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:create-book');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/create-meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | create-meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:create-meeting');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/create-review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | create-review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:create-review');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:create');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/edit-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | edit-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:edit-book');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/edit-meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | edit-meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:edit-meeting');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/edit-review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | edit-review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:edit-review');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/edit-speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | edit-speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:edit-speaker');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:meeting');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/register-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | register', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:register');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/controllers/speakers-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | speakers', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:speakers');\n      assert.ok(controller);\n    });\n  });\n});","define('books-demo/tests/unit/initializers/start-app-test', ['books-demo/initializers/start-app', 'qunit', 'ember-qunit'], function (_startApp, _qunit, _emberQunit) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _qunit.module)('Unit | Initializer | start-app', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.TestApplication = Ember.Application.extend();\n      this.TestApplication.initializer({\n        name: 'initializer under test',\n        initialize: _startApp.initialize\n      });\n\n      this.application = this.TestApplication.create({ autoboot: false });\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(this.application, 'destroy');\n    });\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.application.boot();\n\n              case 2:\n\n                assert.ok(true);\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define('books-demo/tests/unit/models/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('book', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/models/error-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | error', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('error', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/models/meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('meeting', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/models/review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('review', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/models/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('speaker', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/models/user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var model = Ember.run(function () {\n        return store.createRecord('user', {});\n      });\n      assert.ok(model);\n    });\n  });\n});","define('books-demo/tests/unit/routes/404-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | 404', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:404');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/books-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | books', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:books');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/create-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | create-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:create-book');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/create-meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | create-meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:create-meeting');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/create-review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | create-review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:create-review');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/edit-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | edit-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:edit-book');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/edit-meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | edit-meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:edit-meeting');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/edit-review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | edit-review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:edit-review');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/edit-speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | edit-speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:edit-speaker');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:login');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:meeting');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/register-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | register', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:register');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:review');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/speakers-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speakers', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:speakers');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/speakers/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speakers/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:speakers/detail');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/serializers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var serializer = store.serializerFor('application');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('application', {});\n      });\n\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('books-demo/tests/unit/serializers/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var serializer = store.serializerFor('book');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('book', {});\n      });\n\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('books-demo/tests/unit/serializers/meeting-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | meeting', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var serializer = store.serializerFor('meeting');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('meeting', {});\n      });\n\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('books-demo/tests/unit/serializers/review-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | review', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var serializer = store.serializerFor('review');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('review', {});\n      });\n\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('books-demo/tests/unit/serializers/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var serializer = store.serializerFor('speaker');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      var store = this.owner.lookup('service:store');\n      var record = Ember.run(function () {\n        return store.createRecord('speaker', {});\n      });\n\n      var serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('books-demo/tests/unit/services/current-user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | current-user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:current-user');\n      assert.ok(service);\n    });\n  });\n});","define('books-demo/tests/unit/services/data-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:data');\n      assert.ok(service);\n    });\n  });\n});","define('books-demo/tests/unit/services/error-service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | error-service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:error-service');\n      assert.ok(service);\n    });\n  });\n});","define('books-demo/tests/unit/transforms/date-string-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('transform:date-string', 'Unit | Transform | date string', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      var transform = this.owner.lookup('transform:date-string');\n      assert.ok(transform);\n    });\n  });\n});","define('books-demo/config/environment', [], function() {\n  var prefix = 'books-demo';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('books-demo/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}